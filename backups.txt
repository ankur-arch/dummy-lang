cmake file
calc: lex.yy.c TypeUtils.c y.tab.c
	gcc -g lex.yy.c TypeUtils.c y.tab.c -o calc

lex.yy.c: y.tab.c calc.l
	lex calc.l

y.tab.c: calc.y
	yacc -d calc.y

TypeUtils.c: Types.h
	gcc TypeUtils.c -o TypeUtils 

clean: 
	rm -rf lex.yy.c y.tab.c y.tab.h calc calc.dSYM


fixed major bug : details regarding yylval
https://tldp.org/HOWTO/Lex-YACC-HOWTO-6.html#:~:text=Each%20call%20to%20yylex(),file%20by%20re%23defining%20YYSTYPE.

adding multiple types 
https://stackoverflow.com/questions/22891458/assigning-multiple-types-to-non-terminals-in-bison


/*
    struct Float v, v2, v3, v4;
    v.Name = "hasan";
    v.Type = "Float";
    v.value = 100;

    v2.Name = "hasan";
    v2.Type = "Float";
    v2.value = 30;

    v3.Name = "Mahasan";
    v3.Type = "Float";
    v3.value = 120;

    addFloatVariable(v);

    addFloatVariable(v3);
    float man = getFloatVariableValue("Mahasan");
    printf("The value of the search function is %f \n", man);
    printf("Hello world %s , value : %f \n %d \n", FloatVariableTable[0].Name, FloatVariableTable[0].value, FloatVariableStackCounter);
    updateFloatVariable("hasan",525);
    printf("Hello world %s , value : %f \n %d \n", FloatVariableTable[0].Name, FloatVariableTable[0].value ,FloatVariableStackCounter);

*/

CONTROL : IF '(' CONDITIONALEXPRESSION ')' THENSTMT    { top(); printf("address in if =>control :%p condition : %p Statement : %p \n",&$$, &$3, &$<s>5); pop();}
        | IF '(' CONDITIONALEXPRESSION ')' THENSTMT ELSE OTHERSTMT { printf("if - else condition \n"); }
        ;

// previous if else logic
CONTROL : IF '(' CONDITIONALEXPRESSION ')' THENSTMT    { int status = top(); if( status==1 || status==-1 ){ printf("address in if =>control :%p condition : %p Statement : %p \n",&$$, &$3, &$<s>5);}else printf("Skipped If condition \n");}
        | IF '(' CONDITIONALEXPRESSION ')' THENSTMT ELSE OTHERSTMT { int status = top(); if(status==1 || status==-1){ printf("if - %s condition entered \n", $<s>6 ); } }
        ;

CONDITIONALEXPRESSION : CONDITION     { printf("pushed into conditional \n"); push(!(int)($1)); push((int)($1));}
                      ;

THENSTMT : '{' RETURN E ';''}'   { int resultif = (int)($<f>-1) ;  printf("inside if the single statement address : %p \n", &$<s>$); printf("the address inside the statement %p  with the value being %d\n", &$<f>-1, resultif ); if(resultif == 1){ printf("The returned value %f \n",$3); } pop(); }
         | '{' M '}'             {  int resultif = (int)($<f>-1) ; printf("the address inside the statement block %p  with the value being %d\n", &$<f>-1, resultif ); if(resultif == 1){ printf("BLOCK CONDITION MISMATCH \n") ; } pop();  }
         ;

OTHERSTMT : '{' RETURN E ';' '}' ';'  { int resultif = (int)($<f>-3) ; top();  printf("the address inside the ELSE statement %p  with the value being %d\n",  &$<f>-3, resultif ); if(resultif != 1){ printf("The returned else value %f \n",$3); }  }            
          ;

// if else conditional action 

if(topval==1){if(isIF(condition)==1){push(result);push(result);}else{push(0);}}
 else{if(isIF(condition)==1 && ( topval==-1 || topval==1 )){ push(result); push(result); }
 else if(isIF(condition)==1 && topval == 0){ push(0); push(0);}
 else if(isELSEIF(condition)==1 && topval == 0 ){ pop(); 
 push(result); push(result);}else{ push(0);} }



     //if stack top is zero
    // and is IF push zero zero and statement is nested and elseAllowed = 0
    // and is IF ELSE and parentAllowed
    // pop() and push(result) and push(result) and elseAllowed =!result
    //and is IF ELSE and !parentAllowed
    // push(0) and elseAllowed = 0
    // else stack top is one
    // and is IF push result result and statement is nested and elseAllowed = !result
    // and is IF ELSE
    // push(0) and elseAllowed = 0











//  float x ; 
float x, y=10 , y; 
x = 10; 



LINE : FLOAT VARNAME '=' E ';'        { Number v; v.Name = $2 ; v.Type = $1 ; v.value=$4; addFloatVariable(v); }
  | VARNAME '=' E ';'              { updateFloatVariable($1,$3); }
  | PRINTER ';'            {;}                                                          
  ;

MultipleDeclaration : MultipleDeclaration '=' E ';'
                    | ',' VARNAME ';'
                    | VARNAME '=' E ';'


a : t ee 

ee : ee , v = e ; 
   | ee , v ; 
   | v = e ; 
   | v ;      

